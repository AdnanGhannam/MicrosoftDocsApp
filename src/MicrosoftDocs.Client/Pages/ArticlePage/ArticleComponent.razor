@page "/documentation/article";
@using MicrosoftDocs.Client.Shared.ExpansionListComponent;
@using MicrosoftDocs.Client.Shared.ArticlesNavigationComponent;

<section class="article-page">
    <ArticlesNavigation Class="article-page__articles-nav"/>
    <ArticleBody Title="Claims-based authorization in ASP.NET Core" Content="@content"
                    PublishTime="@(DateTime.Now)" Path="@path" ReadingTime="10" Contributors="contributors"/>
    <ExpansionList Title="In this article" Links="links" Class="article-page__expansion-list"/>
</section>

@code {
    private Dictionary<string, string> links = new();

    private Dictionary<string, string> path = new();

    private List<string> contributors = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        links.Add("#1", "Prerequisites");
        links.Add("#2", "The starter and completed app");
        links.Add("#3", "Secure user data");
        links.Add("#4", "Create owner, manager, and administrator authorization handlers");
        links.Add("#5", "Register the authorization handlers");
        links.Add("#6", "Support authorization");
        links.Add("#7", "Inject the authorization service into the views");

        path.Add("#1", "Docs");
        path.Add("#2", ".NET");
        path.Add("#3", "ASP.NET Core");
        path.Add("#4", "Security and Identity");
        path.Add("#5", "Authorization");

        contributors.Add("Rick-Anderson");
        contributors.Add("guardrex");
        contributors.Add("serpent5");
        contributors.Add("v-haiboz");
        contributors.Add("ashotmuradian");
        contributors.Add("HannesSam");
        contributors.Add("scottaddie");
        contributors.Add("AskYous");
        contributors.Add("CamSoper");
        contributors.Add("tdykstra");
        contributors.Add("OblivionSY");
        contributors.Add("Triwaters");
        contributors.Add("isaac2004");
    }

    private string content = "<div data-moniker=\"aspnetcore-6.0 aspnetcore-7.0\"> <p>When an identity is created it may be assigned one or more claims issued by a trusted party. A claim is a name value pair that represents what the subject is, not what the subject can do. For example, you may have a driver\'s license, issued by a local driving license authority. Your driver\'s license has your date of birth on it. In this case the claim name would be <code>DateOfBirth</code>, the claim value would be your date of birth, for example <code>8th June 1970</code> and the issuer would be the driving license authority. Claims based authorization, at its simplest, checks the value of a claim and allows access to a resource based upon that value. For example if you want access to a night club the authorization process might be:</p> <p>The door security officer would evaluate the value of your date of birth claim and whether they trust the issuer (the driving license authority) before granting you access.</p> <p>An identity can contain multiple claims with multiple values and can contain multiple claims of the same type.</p> <h2 id=\"adding-claims-checks\" class=\"heading-anchor\"><a class=\"anchor-link docon docon-link\" href=\"#adding-claims-checks\" aria-labelledby=\"adding-claims-checks\"></a>Adding claims checks</h2> <p>Claim based authorization checks:</p> <ul> <li>Are declarative.</li> <li>Are applied to Razor Pages, controllers, or actions within a controller.</li> <li>Can <em><strong>not</strong></em> be applied at the Razor Page handler level, they must be applied to the Page.</li> </ul> <p>Claims in code specify claims which the current user must possess, and optionally the value the claim must hold to access the requested resource. Claims requirements are policy based, the developer must build and register a policy expressing the claims requirements.</p> <p>The simplest type of claim policy looks for the presence of a claim and doesn\'t check the value.</p> <p>Build and register the policy and call <a href=\"/en-us/dotnet/api/microsoft.aspnetcore.builder.authorizationappbuilderextensions.useauthorization\" class=\"no-loc\" data-linktype=\"absolute-path\">UseAuthorization</a>. Registering the policy takes place as part of the Authorization service configuration, typically in the <code>Program.cs</code> file:</p> <div class=\"codeHeader\" id=\"code-try-0\" data-bi-name=\"code-header\"><span class=\"language\">C#</span><button type=\"button\" class=\"action position-relative\" data-bi-name=\"copy\" aria-label=\"Copy code\"> <span class=\"icon margin-right-xxs\"> <span class=\"docon docon-edit-copy\" role=\"presentation\"></span> </span> <span>Copy</span> <div class=\"successful-copy-alert position-absolute right-0 top-0 left-0 bottom-0 display-flex align-items-center justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\"> <span class=\"icon font-size-lg\"> <span class=\"docon docon-check-mark\" role=\"presentation\"></span> </span> </div> </button></div><pre tabindex=\"0\" class=\"has-inner-focus\"><code class=\"lang-csharp\" highlight-lines=\"6-9,23\" data-author-content=\"var builder = WebApplication.CreateBuilder(args); builder.Services.AddRazorPages(); builder.Services.AddControllersWithViews(); builder.Services.AddAuthorization(options => { options.AddPolicy(&quot;EmployeeOnly&quot;, policy => policy.RequireClaim(&quot;EmployeeNumber&quot;)); }); var app = builder.Build(); if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(&quot;/Error&quot;); app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseAuthentication(); app.UseAuthorization(); app.MapDefaultControllerRoute(); app.MapRazorPages(); app.Run(); \"><span><span class=\"hljs-keyword\">var</span> builder = WebApplication.CreateBuilder(args); builder.Services.AddRazorPages(); builder.Services.AddControllersWithViews(); </span> <mark>builder.Services.AddAuthorization(options =&gt; { options.AddPolicy(<span class=\"hljs-string\">\"EmployeeOnly\"</span>, policy =&gt; policy.RequireClaim(<span class=\"hljs-string\">\"EmployeeNumber\"</span>)); });</mark> <span> <span class=\"hljs-keyword\">var</span> app = builder.Build(); <span class=\"hljs-keyword\">if</span> (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(<span class=\"hljs-string\">\"/Error\"</span>); app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseAuthentication();</span> <mark>app.UseAuthorization();</mark> <span> app.MapDefaultControllerRoute(); app.MapRazorPages(); app.Run(); </span></code></pre> <p>In this case the <code>EmployeeOnly</code> policy checks for the presence of an <code>EmployeeNumber</code> claim on the current identity.</p> <p>Apply the policy using the <code>Policy</code> property on the <a href=\"/en-us/dotnet/api/microsoft.aspnetcore.authorization.authorizeattribute\" data-linktype=\"absolute-path\"><code>[Authorize]</code></a> attribute to specify the policy name;</p> <div class=\"codeHeader\" id=\"code-try-1\" data-bi-name=\"code-header\"><span class=\"language\">C#</span><button type=\"button\" class=\"action position-relative\" data-bi-name=\"copy\" aria-label=\"Copy code\"> <span class=\"icon margin-right-xxs\"> <span class=\"docon docon-edit-copy\" role=\"presentation\"></span> </span> <span>Copy</span> <div class=\"successful-copy-alert position-absolute right-0 top-0 left-0 bottom-0 display-flex align-items-center justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\"> <span class=\"icon font-size-lg\"> <span class=\"docon docon-check-mark\" role=\"presentation\"></span> </span> </div> </button></div><pre tabindex=\"0\" class=\"has-inner-focus\"><code class=\"lang-csharp\" highlight-lines=\"1\" data-author-content=\"[Authorize(Policy = &quot;EmployeeOnly&quot;)] public IActionResult VacationBalance() { return View(); } \"><mark>[<span class=\"hljs-meta\">Authorize(Policy = <span class=\"hljs-string\">\"EmployeeOnly\"</span>)</span>]</mark> <span><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IActionResult <span class=\"hljs-title\">VacationBalance</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } </span></code></pre> <p>The <code>[Authorize]</code> attribute can be applied to an entire controller or Razor Page, in this instance only identities matching the policy are allowed access to any Action on the controller.</p> <div class=\"codeHeader\" id=\"code-try-2\" data-bi-name=\"code-header\"><span class=\"language\">C#</span><button type=\"button\" class=\"action position-relative\" data-bi-name=\"copy\" aria-label=\"Copy code\"> <span class=\"icon margin-right-xxs\"> <span class=\"docon docon-edit-copy\" role=\"presentation\"></span> </span> <span>Copy</span> <div class=\"successful-copy-alert position-absolute right-0 top-0 left-0 bottom-0 display-flex align-items-center justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\"> <span class=\"icon font-size-lg\"> <span class=\"docon docon-check-mark\" role=\"presentation\"></span> </span> </div> </button></div><pre tabindex=\"0\" class=\"has-inner-focus\"><code class=\"lang-csharp\" highlight-lines=\"1\" data-author-content=\"[Authorize(Policy = &quot;EmployeeOnly&quot;)] public class VacationController : Controller { public IActionResult Index() { return View(); } public ActionResult VacationBalance() { return View(); } [AllowAnonymous] public ActionResult VacationPolicy() { return View(); } } \"><mark>[<span class=\"hljs-meta\">Authorize(Policy = <span class=\"hljs-string\">\"EmployeeOnly\"</span>)</span>]</mark> <span><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VacationController</span> : <span class=\"hljs-title\">Controller</span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IActionResult <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ActionResult <span class=\"hljs-title\">VacationBalance</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } [<span class=\"hljs-meta\">AllowAnonymous</span>] <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ActionResult <span class=\"hljs-title\">VacationPolicy</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } } </span></code></pre> <p>The following code applies the <code>[Authorize]</code> attribute to a Razor Page:</p> <div class=\"codeHeader\" id=\"code-try-3\" data-bi-name=\"code-header\"><span class=\"language\">C#</span><button type=\"button\" class=\"action position-relative\" data-bi-name=\"copy\" aria-label=\"Copy code\"> <span class=\"icon margin-right-xxs\"> <span class=\"docon docon-edit-copy\" role=\"presentation\"></span> </span> <span>Copy</span> <div class=\"successful-copy-alert position-absolute right-0 top-0 left-0 bottom-0 display-flex align-items-center justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\"> <span class=\"icon font-size-lg\"> <span class=\"docon docon-check-mark\" role=\"presentation\"></span> </span> </div> </button></div><pre tabindex=\"0\" class=\"has-inner-focus\"><code class=\"lang-csharp\" highlight-lines=\"1\" data-author-content=\"[Authorize(Policy = &quot;EmployeeOnly&quot;)] public class IndexModel : PageModel { public void OnGet() { } } \"><mark>[<span class=\"hljs-meta\">Authorize(Policy = <span class=\"hljs-string\">\"EmployeeOnly\"</span>)</span>]</mark> <span><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexModel</span> : <span class=\"hljs-title\">PageModel</span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnGet</span>(<span class=\"hljs-params\"></span>)</span> { } } </span></code></pre> <p>Policies can <em><strong>not</strong></em> be applied at the Razor Page handler level, they must be applied to the Page.</p> <p>If you have a controller that\'s protected by the <code>[Authorize]</code> attribute, but want to allow anonymous access to particular actions you apply the <code>AllowAnonymousAttribute</code> attribute.</p> <div class=\"codeHeader\" id=\"code-try-4\" data-bi-name=\"code-header\"><span class=\"language\">C#</span><button type=\"button\" class=\"action position-relative\" data-bi-name=\"copy\" aria-label=\"Copy code\"> <span class=\"icon margin-right-xxs\"> <span class=\"docon docon-edit-copy\" role=\"presentation\"></span> </span> <span>Copy</span> <div class=\"successful-copy-alert position-absolute right-0 top-0 left-0 bottom-0 display-flex align-items-center justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\"> <span class=\"icon font-size-lg\"> <span class=\"docon docon-check-mark\" role=\"presentation\"></span> </span> </div> </button></div><pre tabindex=\"0\" class=\"has-inner-focus\"><code class=\"lang-csharp\" highlight-lines=\"14\" data-author-content=\"[Authorize(Policy = &quot;EmployeeOnly&quot;)] public class VacationController : Controller { public IActionResult Index() { return View(); } public ActionResult VacationBalance() { return View(); } [AllowAnonymous] public ActionResult VacationPolicy() { return View(); } } \"><span>[<span class=\"hljs-meta\">Authorize(Policy = <span class=\"hljs-string\">\"EmployeeOnly\"</span>)</span>] <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VacationController</span> : <span class=\"hljs-title\">Controller</span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IActionResult <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ActionResult <span class=\"hljs-title\">VacationBalance</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } </span> <mark>    [<span class=\"hljs-meta\">AllowAnonymous</span>]</mark> <span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ActionResult <span class=\"hljs-title\">VacationPolicy</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-keyword\">return</span> View(); } } </span></code></pre> <p>Because policies can <em><strong>not</strong></em> be applied at the Razor Page handler level, we recommend using a controller when polices must be applied at the page handler level. The rest of the app that doesn\'t require policies at the Razor Page handler level can use Razor Pages.</p> <p>Most claims come with a value. You can specify a list of allowed values when creating the policy. The following example would only succeed for employees whose employee number was 1, 2, 3, 4 or 5.</p>";

}
